"""Dashboard Streamlit para an√°lise de VaR do Bitcoin usando Monte Carlo."""

from __future__ import annotations

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import numpy as np

from src.btc_var_calculator import (
    fetch_btc_hourly_data,
    calculate_hourly_returns,
    monte_carlo_var,
    calculate_var_for_periods,
    calculate_var_monetary,
    get_var_statistics,
)

st.set_page_config(
    page_title="An√°lise de VaR - Bitcoin",
    page_icon="‚Çø",
    layout="wide"
)

st.title("‚Çø An√°lise de VaR (Value at Risk) - Bitcoin/USD")

st.markdown("""
Esta aplica√ß√£o calcula o **VaR (Value at Risk)** do Bitcoin usando **simula√ß√£o Monte Carlo**.
O VaR estima a perda m√°xima esperada em um investimento durante um per√≠odo com um dado n√≠vel de confian√ßa.

**Dados**: Pre√ßos hor√°rios do BTC/USD dos √∫ltimos ~5 anos
""")

# Sidebar com configura√ß√µes
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")

    st.subheader("Simula√ß√£o Monte Carlo")
    num_simulations = st.number_input(
        "N√∫mero de Simula√ß√µes",
        min_value=1000,
        max_value=100000,
        value=10000,
        step=1000,
        help="Maior n√∫mero = resultados mais precisos, mas demora mais"
    )

    random_seed = st.number_input(
        "Seed Aleat√≥ria",
        min_value=1,
        max_value=9999,
        value=42,
        help="Para reprodutibilidade dos resultados"
    )

    st.subheader("An√°lise Monet√°ria")
    investment_value = st.number_input(
        "Valor do Investimento (USD)",
        min_value=0.0,
        value=10000.0,
        step=1000.0,
        help="Valor investido em Bitcoin"
    )

    years_history = st.slider(
        "Anos de Hist√≥rico",
        min_value=1,
        max_value=5,
        value=5,
        help="Quantidade de anos de dados hist√≥ricos (limitado pela API)"
    )


# Cache para dados
@st.cache_data(show_spinner=False)
def load_btc_data(years: int):
    """Carrega dados do Bitcoin."""
    return fetch_btc_hourly_data(years=years)


@st.cache_data(show_spinner=False)
def compute_returns(prices: pd.DataFrame):
    """Calcula retornos."""
    return calculate_hourly_returns(prices)


# Carregar dados
with st.spinner("üîÑ Carregando dados do Bitcoin..."):
    try:
        btc_prices = load_btc_data(years_history)
        returns = compute_returns(btc_prices)
        st.success(f"‚úÖ Dados carregados: {len(btc_prices)} observa√ß√µes hor√°rias")
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados: {str(e)}")
        st.stop()

# Tabs para organizar conte√∫do
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä VaR - Per√≠odos Padr√£o",
    "üéØ VaR - Per√≠odo Customizado",
    "üìà Distribui√ß√£o de Retornos",
    "üí∞ An√°lise Monet√°ria",
    "üìâ Dados Hist√≥ricos"
])

# Tab 1: VaR para per√≠odos padr√£o
with tab1:
    st.header("VaR para Per√≠odos Padr√£o")

    with st.spinner("üîÑ Calculando VaR para per√≠odos padr√£o..."):
        var_results_df = calculate_var_for_periods(
            returns,
            num_simulations=num_simulations
        )

    st.dataframe(
        var_results_df[["Per√≠odo", "Horas", "VaR 95%", "VaR 99%"]],
        use_container_width=True,
        hide_index=True
    )

    # Gr√°fico comparativo
    fig = go.Figure()

    fig.add_trace(go.Bar(
        name='VaR 95%',
        x=var_results_df['Per√≠odo'],
        y=var_results_df['VaR 95% (valor)'] * 100,
        marker_color='orange'
    ))

    fig.add_trace(go.Bar(
        name='VaR 99%',
        x=var_results_df['Per√≠odo'],
        y=var_results_df['VaR 99% (valor)'] * 100,
        marker_color='red'
    ))

    fig.update_layout(
        title='Compara√ß√£o de VaR por Per√≠odo',
        xaxis_title='Per√≠odo',
        yaxis_title='VaR (%)',
        barmode='group',
        height=400
    )

    st.plotly_chart(fig, use_container_width=True)

    st.info("""
    **Interpreta√ß√£o**:
    - **VaR 95%**: Em 95% dos casos, a perda n√£o exceder√° este valor
    - **VaR 99%**: Em 99% dos casos, a perda n√£o exceder√° este valor
    - Valores negativos indicam perdas potenciais
    """)

# Tab 2: VaR customizado
with tab2:
    st.header("VaR para Per√≠odo Customizado")

    col1, col2 = st.columns(2)

    with col1:
        time_unit = st.radio(
            "Unidade de Tempo",
            options=["Horas", "Dias"],
            horizontal=True
        )

    with col2:
        if time_unit == "Horas":
            time_value = st.number_input(
                "Quantidade de Horas",
                min_value=1,
                max_value=24 * 365,
                value=24,
                step=1
            )
            horizon_hours = time_value
        else:
            time_value = st.number_input(
                "Quantidade de Dias",
                min_value=1,
                max_value=365,
                value=1,
                step=1
            )
            horizon_hours = time_value * 24

    if st.button("üé≤ Calcular VaR", type="primary"):
        with st.spinner(f"üîÑ Calculando VaR para {horizon_hours} horas..."):
            custom_var = monte_carlo_var(
                returns,
                horizon_hours=horizon_hours,
                num_simulations=num_simulations,
                random_seed=random_seed
            )

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(
                "VaR 95%",
                f"{custom_var.var_95:.2%}",
                help="Perda m√°xima em 95% dos cen√°rios"
            )

        with col2:
            st.metric(
                "VaR 99%",
                f"{custom_var.var_99:.2%}",
                help="Perda m√°xima em 99% dos cen√°rios"
            )

        with col3:
            st.metric(
                "Volatilidade Hor√°ria",
                f"{custom_var.volatility:.4%}"
            )

        # Histograma das simula√ß√µes
        st.subheader("Distribui√ß√£o dos Retornos Simulados")

        fig = go.Figure()

        fig.add_trace(go.Histogram(
            x=custom_var.simulated_returns * 100,
            nbinsx=100,
            name='Retornos Simulados',
            marker_color='lightblue'
        ))

        # Linhas de VaR
        fig.add_vline(
            x=custom_var.var_95 * 100,
            line_dash="dash",
            line_color="orange",
            annotation_text=f"VaR 95%: {custom_var.var_95:.2%}"
        )

        fig.add_vline(
            x=custom_var.var_99 * 100,
            line_dash="dash",
            line_color="red",
            annotation_text=f"VaR 99%: {custom_var.var_99:.2%}"
        )

        fig.update_layout(
            title=f'Distribui√ß√£o de {num_simulations:,} Simula√ß√µes Monte Carlo',
            xaxis_title='Retorno (%)',
            yaxis_title='Frequ√™ncia',
            height=500,
            showlegend=True
        )

        st.plotly_chart(fig, use_container_width=True)

        # Estat√≠sticas das simula√ß√µes
        st.subheader("Estat√≠sticas das Simula√ß√µes")

        sim_stats = pd.DataFrame({
            "M√©trica": [
                "M√©dia",
                "Mediana",
                "Desvio Padr√£o",
                "M√≠nimo",
                "M√°ximo",
                "Percentil 5%",
                "Percentil 1%"
            ],
            "Valor": [
                f"{custom_var.simulated_returns.mean():.2%}",
                f"{np.median(custom_var.simulated_returns):.2%}",
                f"{custom_var.simulated_returns.std():.2%}",
                f"{custom_var.simulated_returns.min():.2%}",
                f"{custom_var.simulated_returns.max():.2%}",
                f"{custom_var.var_95:.2%}",
                f"{custom_var.var_99:.2%}",
            ]
        })

        st.dataframe(sim_stats, use_container_width=True, hide_index=True)

# Tab 3: Distribui√ß√£o de retornos hist√≥ricos
with tab3:
    st.header("Distribui√ß√£o de Retornos Hist√≥ricos")

    # Estat√≠sticas descritivas
    stats = get_var_statistics(returns)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("Retorno M√©dio", stats["Retorno M√©dio (hor√°rio)"])
        st.metric("Desvio Padr√£o", stats["Desvio Padr√£o"])

    with col2:
        st.metric("Assimetria", stats["Assimetria (Skewness)"])
        st.metric("Curtose", stats["Curtose (Kurtosis)"])

    with col3:
        st.metric("M√≠nimo", stats["M√≠nimo"])
        st.metric("M√°ximo", stats["M√°ximo"])

    with col4:
        st.metric("Observa√ß√µes", f"{stats['Observa√ß√µes']:,}")
        st.metric("Mediana", stats["Retorno Mediano"])

    # Histograma de retornos
    fig = px.histogram(
        returns * 100,
        nbins=100,
        title="Distribui√ß√£o de Retornos Hor√°rios",
        labels={"value": "Retorno (%)", "count": "Frequ√™ncia"}
    )

    fig.update_layout(
        showlegend=False,
        height=400
    )

    st.plotly_chart(fig, use_container_width=True)

    # QQ Plot (para verificar normalidade)
    st.subheader("Q-Q Plot (Teste de Normalidade)")

    from scipy import stats as scipy_stats

    qq_data = scipy_stats.probplot(returns.dropna(), dist="norm")

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=qq_data[0][0],
        y=qq_data[0][1],
        mode='markers',
        name='Dados',
        marker=dict(color='blue', size=3)
    ))

    fig.add_trace(go.Scatter(
        x=qq_data[0][0],
        y=qq_data[0][0] * qq_data[1][0] + qq_data[1][1],
        mode='lines',
        name='Normal Te√≥rica',
        line=dict(color='red', dash='dash')
    ))

    fig.update_layout(
        title='Q-Q Plot - Compara√ß√£o com Distribui√ß√£o Normal',
        xaxis_title='Quantis Te√≥ricos',
        yaxis_title='Quantis Amostrais',
        height=400
    )

    st.plotly_chart(fig, use_container_width=True)

    st.info("""
    **Interpreta√ß√£o do Q-Q Plot**:
    - Se os pontos seguem a linha vermelha, os dados s√£o aproximadamente normais
    - Desvios nas extremidades indicam caudas mais pesadas (fat tails)
    - Retornos de criptomoedas tipicamente t√™m caudas pesadas
    """)

# Tab 4: An√°lise monet√°ria
with tab4:
    st.header("An√°lise Monet√°ria do VaR")

    st.info(f"üí∞ Valor do Investimento: **${investment_value:,.2f}**")

    # Calcular VaR monet√°rio para per√≠odos padr√£o
    monetary_results = []

    for _, row in var_results_df.iterrows():
        var_95_monetary = calculate_var_monetary(row['VaR 95% (valor)'], investment_value)
        var_99_monetary = calculate_var_monetary(row['VaR 99% (valor)'], investment_value)

        monetary_results.append({
            "Per√≠odo": row['Per√≠odo'],
            "Perda M√°xima (VaR 95%)": f"${var_95_monetary:,.2f}",
            "Perda M√°xima (VaR 99%)": f"${var_99_monetary:,.2f}",
            "VaR 95% valor": var_95_monetary,
            "VaR 99% valor": var_99_monetary,
        })

    monetary_df = pd.DataFrame(monetary_results)

    st.dataframe(
        monetary_df[["Per√≠odo", "Perda M√°xima (VaR 95%)", "Perda M√°xima (VaR 99%)"]],
        use_container_width=True,
        hide_index=True
    )

    # Gr√°fico de barras
    fig = go.Figure()

    fig.add_trace(go.Bar(
        name='Perda M√°xima VaR 95%',
        x=monetary_df['Per√≠odo'],
        y=monetary_df['VaR 95% valor'],
        marker_color='orange',
        text=monetary_df['Perda M√°xima (VaR 95%)'],
        textposition='outside'
    ))

    fig.add_trace(go.Bar(
        name='Perda M√°xima VaR 99%',
        x=monetary_df['Per√≠odo'],
        y=monetary_df['VaR 99% valor'],
        marker_color='red',
        text=monetary_df['Perda M√°xima (VaR 99%)'],
        textposition='outside'
    ))

    fig.update_layout(
        title=f'Perda M√°xima Esperada (Investimento: ${investment_value:,.2f})',
        xaxis_title='Per√≠odo',
        yaxis_title='Perda M√°xima (USD)',
        barmode='group',
        height=500
    )

    st.plotly_chart(fig, use_container_width=True)

    st.warning("""
    **Importante**:
    - Estes valores representam a perda m√°xima esperada com os n√≠veis de confian√ßa especificados
    - VaR n√£o captura perdas extremas (tail risk) al√©m dos percentis calculados
    - Considere tamb√©m o CVaR (Conditional VaR) para cen√°rios extremos
    - Criptomoedas t√™m alta volatilidade - use estes valores como refer√™ncia de risco
    """)

# Tab 5: Dados hist√≥ricos
with tab5:
    st.header("Dados Hist√≥ricos do Bitcoin")

    st.subheader("Evolu√ß√£o do Pre√ßo")

    fig = px.line(
        btc_prices,
        y='Close',
        title='Pre√ßo do Bitcoin/USD (Hor√°rio)',
        labels={'Close': 'Pre√ßo (USD)', 'index': 'Data'}
    )

    fig.update_layout(height=400)

    st.plotly_chart(fig, use_container_width=True)

    # S√©rie de retornos
    st.subheader("S√©rie Temporal de Retornos")

    fig = px.line(
        returns * 100,
        title='Retornos Hor√°rios do Bitcoin (%)',
        labels={'value': 'Retorno (%)', 'index': 'Data'}
    )

    fig.update_layout(height=400, showlegend=False)

    st.plotly_chart(fig, use_container_width=True)

    # Rolling volatility
    st.subheader("Volatilidade M√≥vel (30 dias)")

    rolling_vol = returns.rolling(window=24*30).std() * np.sqrt(24) * 100  # Volatilidade di√°ria

    fig = px.line(
        rolling_vol,
        title='Volatilidade Di√°ria M√≥vel (janela de 30 dias)',
        labels={'value': 'Volatilidade Di√°ria (%)', 'index': 'Data'}
    )

    fig.update_layout(height=400, showlegend=False)

    st.plotly_chart(fig, use_container_width=True)

    # Tabela com amostra dos dados
    st.subheader("Amostra dos Dados")

    sample_data = btc_prices[['Close']].copy()
    sample_data['Retorno (%)'] = returns * 100

    st.dataframe(
        sample_data.tail(100),
        use_container_width=True
    )

# Footer
st.divider()

st.markdown("""
**Notas**:
- VaR calculado usando simula√ß√£o Monte Carlo com retornos logar√≠tmicos
- Assume distribui√ß√£o normal dos retornos (validar com Q-Q Plot)
- Dados obtidos via yfinance (Yahoo Finance)
- Para an√°lise profissional, considere tamb√©m CVaR, Expected Shortfall e stress testing

**Desenvolvido com**: Python, Streamlit, Pandas, NumPy, Plotly
""")
